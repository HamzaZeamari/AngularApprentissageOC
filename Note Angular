    Le framework Angular utilise le HTML, le SCSS et le TypeScript.

    Le TypeScript est un langage qui ajoute des syntaxes au JavaScript, notamment pour le typage strict.

    Pour installer le CLI d'Angular, il vous faut une version LTS de Node et npm.
------------------------------------------------------

    On installe le CLI avec la commande  npm i -g @angular/cli

    On peut vérifier la version installée du CLI avec  ng v

    Une nouvelle application Angular se crée avec  ng new

    ng serve  exécute le serveur de développement.
------------------------------------------------------
    La balise  <app-root>  correspond à AppComponent.

        Une application Angular peut être vue comme une arborescence de components.

    Un component lie un template HTML et des styles SCSS à du comportement TS.

    Pour créer un component, on utilise la commande  ng generate component nom-du-component

    Le sélecteur d'un component correspond à la balise HTML personnalisée qu'on utilisera pour l'insérer dans l'application.
------------------------------------------------------

    On déclare les propriétés d'un component en haut de sa classe, et on les initialise dans la méthode  ngOnInit()

    La méthode  ngOnInit()  est appelée une fois par instance de component au moment de la création de cette instance.

    La string interpolation avec les doubles accolades  {{ }}  permet d'insérer la valeur d'une propriété TypeScript dans le template.

    L'attribute binding permet de lier la valeur d'une propriété TypeScript à un attribut HTML, en mettant l'attribut entre crochets  []  et en passant le nom de la propriété.

------------------------------------------------------
Pour lier une méthode à un événement d'un élément du template, mettez l'événement entre parenthèses  ()
et passez la méthode en argument ; ex. : (click)="onClickButton()"


------------------------------------------------------

    N'hésitez pas à créer vos propres types, sous forme de classe par exemple, pour faciliter la manipulation de données dans votre application.

    Une propriété personnalisée est rendue injectable depuis l'extérieur grâce au décorateur  @Input()

    Une propriété en  @Input()  est utilisable comme n'importe quelle autre propriété : on peut en afficher les éléments, les modifier…

    On lie ensuite une valeur à cette propriété depuis le component parent avec l'attribute binding, c'est-à-dire le nom de la propriété entre crochets  []  en passant la valeur entre les guillemets ; ex. : [faceSnap]="mySnap"


------------------------------------------------------

    Vous pouvez ajouter des propriétés optionnelles à une classe en y ajoutant un point d'interrogation  ?

    Ajouter la directive  *ngIf  à un élément (qui peut aussi être un component) dit à Angular d'ajouter ou non cet élément au DOM selon la condition que vous lui passez, par exemple  <p *ngIf="size === 'large'">

------------------------------------------------------

    La directive  *ngFor  vous permet d'insérer un élément dans le DOM pour chaque élément dans un tableau.

    La syntaxe  let element of array  vous donne accès à l'élément de chaque itération, vous permettant de l'injecter dans un component, par exemple.


------------------------------------------------------
    La directive  [ngStyle]  permet d'appliquer des styles qui dépendent de valeurs dynamiques, comme un texte qui, plus il y a de snaps, devient de plus en plus vert.

    La directive  [ngStyle]  prend comme argument un objet où les clés correspondent aux styles CSS à modifier, et les valeurs aux valeurs que doivent prendre ces styles.


------------------------------------------------------


        La directive  [ngClass]  permet d'ajouter dynamiquement des classes à des éléments HTML.

    [ngClass]  prend un objet en argument où les clés sont des noms de classe CSS, et les valeurs sont les conditions selon lesquelles les classes doivent être appliquées.




------------------------------------------------------

        Un pipe permet de formater l'affichage d'une donnée sans modifier la donnée sous-jacente.

    Angular fournit trois pipes pour modifier la casse affichée d'une chaîne de caractères : UpperCasePipe, LowerCasePipe, et TitleCasePipe pour les majuscules, les minuscules et le mélange type "titre".

        DatePipe permet de formater les dates, et sans configuration fournit un formatage par défaut.

    DatePipe fournit des configurations prédéfinies avec des noms comme  short,  longDate  ou  mediumTime

    DatePipe permet également de personnaliser totalement le format d'affichage des dates avec des chaînes de caractères qui encodent le format souhaité, par exemple  'à HH:mm, le d MMMM yyyy'



        DecimalPipe (mot-clé  number ) vous permet d'afficher un nombre selon les règles de la locale de l'application.

    PercentPipe affiche un nombre entre 0 et 1 sous forme de pourcentage, arrondi par défaut à l'entier le plus proche.

    DecimalPipe et PercentPipe acceptent un argument de configuration sous la forme 'chiffresMinAvantVirgule.chiffresMinAprèsVirgule-chiffresMaxAprèsVirgule' ex. : '1.0.1'

    CurrencyPipe facilite l'affichage des montants d'argent, et accepte plusieurs arguments de configuration séparés par des deux-points  :

------------------------------------------------------



        Les services permettent de centraliser les données et la logique pour les différents domaines de votre application.

    Créer un service est aussi simple qu'ajouter le décorateur  @Injectable()  à une classe.

    Pour injecter un service dans un component, ajoutez un argument au constructor du component qui a le type du service, par exemple private userService: UserService


    Centraliser les interactions dans un service sous forme de méthodes crée une structure plus modulaire, qui facilite la maintenance et les évolutions de votre application.

    Comme dans toute base de code, refactorisez pour éviter de répéter des blocs de code (le principe DRY : Don't Repeat Yourself).

    Les literal types permettent de créer rapidement des types personnalisés, souvent utilisés pour limiter les choix pour un argument de méthode, par exemple : fileType: 'image' | 'video'

        Un module de routing contient un tableau de type  Routes  qui contient les routes de l'application.

    Une route est un objet de type  { path: 'myPath', component: MyComponent }  qui spécifie le component à afficher pour chaque route.

    On appelle  RouterModule.forRoot()  en passant le tableau de routes pour enregistrer les routes dans le routeur Angular.

    On enregistre le module de routing dans AppModule pour ajouter le routeur configuré à l'application.

    On ajoute une balise  <router-outlet>  pour dire à quel niveau du template le component de la route active doit être inséré.

    Pour ajouter des fichiers statiques à une application (comme des images), on les stocke dans le dossier  assets  .

        Créez des liens qui permettent de passer d'une route à l'autre avec la directive  routerLink.

    Ajoutez des classes CSS aux liens correspondants à la route activée avec  routerLinkActive.

    Ignorez l'activation des routes enfants avec  [routerLinkActiveOptions]="{ exact: true }".

    Injectez le Router dans vos components et utilisez sa méthode  navigateByUrl()  pour de la navigation programmatique.

        On récupère les paramètres de la route activée en injectant ActivatedRoute, et via son objet  snapshot.params.

    Pour naviguer vers une route absolue (et non relative), n'oubliez pas d'ajouter un  /  au début de la route demandée.

------------------------------------------------------


    *ngIf  pour ajouter un élément ou non au DOM selon une condition donnée ;

    *ngFor  pour ajouter autant d'éléments au DOM qu'il y a d'éléments dans un tableau.

Vous avez utilisé des directives par attribut pour gérer dynamiquement les styles :

    [ngStyle]  pour paramétrer des styles selon des valeurs venant du TypeScript ;

    [ngClass]  pour ajouter et retirer des classes CSS selon une condition donnée.
